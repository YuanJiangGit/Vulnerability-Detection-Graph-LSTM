## coding:utf-8
from access_db_operate import *
import copy
import tqdm
from general_op import *
from py2neo.packages.httpstream import http
from collections import defaultdict
http.socket_timeout = 9999
import json



def nodes2tree(node_id,parent2child,id2node):
    node = id2node[node_id]
    if len(parent2child[node_id]) == 0:
        feature = node.properties['code']  # 如果是叶子节点获得对应的token，否则获得类型
    else:
        feature = node.properties['type']

    childs = []
    node_tokens = node.properties['code']
    location = node.properties['location']
    for child_id in parent2child[node_id]:
        childs.append(nodes2tree(child_id, parent2child, id2node))
    return {"features": feature, "children": childs, "node_tokens": node_tokens, "node_location": location}


def gen_sing_tree(AST_edges):
    '''
    得到我们想要的树
    '''
    # 1 the corresponding of id and node
    id2node = {}
    for edge in AST_edges:
        start_id = edge.start_node._id
        if start_id not in id2node.keys():
            id2node[start_id] = edge.start_node
        end_id = edge.end_node._id
        if end_id not in id2node.keys():
            id2node[end_id] = edge.end_node

    # 2 the corresponding of ids between parent and child
    parent2child = defaultdict(list)
    for edge in AST_edges:
        parent_id = edge.start_node._id
        child_id = edge.end_node._id
        if child_id not in parent2child[parent_id]:
            parent2child[parent_id].append(child_id)

    # 3 find the root node id
    parent_ids = list(parent2child.keys())
    child_ids = sum(parent2child.values(),[]) # flatten two layer list using sum( , [])
    root_id =None
    for parent_id in parent_ids:
        if parent_id not in child_ids:
            root_id = parent_id

    # 4 orginize node into a sing tree
    tree =  nodes2tree(root_id, parent2child, id2node)
    return tree


def generate_AST():
    j = JoernSteps()
    j.connectToDatabase()
    #获取函数节点
    all_func_node = getALLFuncNode(j)
    for node in tqdm.tqdm(all_func_node):
        testID = getFuncFile(j, node._id).split('/')[-2]
        path = os.path.join("../resources/AST_db", testID)
        store_file_name = node.properties['name'] + '_' + str(node._id)
        store_path = os.path.join(path, store_file_name)
        # if os.path.exists(store_path):
        #     continue
        if not os.path.exists(path):
            os.makedirs(path)
        # if not os.path.exists(store_path):
        #     os.mkdir(store_path)
        AST_edges = getASTofFunc(j, node)
        tree = gen_sing_tree(AST_edges)
        with open(store_path,'w') as f:
            json.dump(tree, f)

if __name__ == '__main__':
    generate_AST()



